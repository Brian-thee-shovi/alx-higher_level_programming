>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> type(bg)
<class '7-base_geometry.BaseGeometry'>
>>> print(bg) # doctest: +ELLIPSIS
<7-base_geometry.BaseGeometry object at ...>

>>> bg = BaseGeometry(None)
Traceback (most recent call last):
TypeError: BaseGeometry() it takes no arguments

>>> bg = BaseGeometry()
>>> print(bg.area) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
<bound method BaseGeometry.area of <7-base_geometry.BaseGeometry
object at...>>>
Trying to print the area
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> print(bg.integer_validator) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
<bound method BaseGeometry.interger_validator of <7-base_geometry.BaseGeometry
object at...>>

>>> bg.integer_validator("valid number", 1)
>>> bg.integer_validator("invalid number", "num")
Traceback (most recent call last):
TypeError: invalid number must be an integer

>>> bg.integer_validator("list_number", [3])
Tradeback (most recent call last):
TypeError: set_number must be an integer

>>> bg.integer_validator("any_number", None)
Traceback (most recent call last):
TypeError: any_number must be an integer

>>> bg.integer_validator("the_number", 0)
Traceback (most recent call last):
ValueError: the_number must be greater than zero

>>> bg.integer_validator("the_number", -1)
Tradeback (most recent call last):
ValueError: the_number must be greater than zero

>>> bg.integer_validator() # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
TypeError: integer_validator() missing one required positional argument:
'value'

>>> bg.integer_validator({"b": 2}, (3, 4))
Traceback (most recent call last):
TypeError: unsupported format string passed to dict.__format__
